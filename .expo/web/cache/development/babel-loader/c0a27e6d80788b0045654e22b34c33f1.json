{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"./styles\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { timeoutPromise, refreshToken, syncData, getRaceList, getFormelList } from \"./tools\";\n\nvar AstridScreen = function (_React$Component) {\n  _inherits(AstridScreen, _React$Component);\n\n  var _super = _createSuper(AstridScreen);\n\n  function AstridScreen(props) {\n    var _this;\n\n    _classCallCheck(this, AstridScreen);\n\n    _this = _super.call(this, props);\n\n    _this.changeRace = function (event) {\n      event.preventDefault();\n\n      _this.props.navigation.goBack();\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n      var airTemperatureUpdate = parseFloat(_this.state.airTemperatureUpdate);\n      var airTemperature = parseFloat(_this.state.airTemperature);\n      var variable1 = parseFloat(_this.state.variable1);\n      var variable2 = parseFloat(_this.state.variable2);\n      var variable3 = parseFloat(_this.state.variable3);\n      var variable4 = parseFloat(_this.state.variable4);\n      var air_pressureFL = parseFloat(_this.state.air_pressureFL);\n      var air_pressureFR = parseFloat(_this.state.air_pressureFR);\n      var air_pressureBL = parseFloat(_this.state.air_pressureBL);\n      var air_pressureBR = parseFloat(_this.state.air_pressureBR);\n      var wert1FL = air_pressureFL * (airTemperatureUpdate + variable1);\n      var wert2FL = parseFloat(wert1FL / (airTemperature + variable2)).toFixed(4);\n      var wert3 = variable3 * (airTemperatureUpdate - airTemperature);\n      var wert4 = airTemperature + variable4;\n      var wert5 = parseFloat(wert3 / wert4).toFixed(4);\n      var FL = parseFloat(parseFloat(wert2FL) + parseFloat(wert5)).toFixed(3);\n      var wert1FR = air_pressureFR * (airTemperatureUpdate + variable1);\n      var wert2FR = parseFloat(wert1FR / (airTemperature + variable2)).toFixed(4);\n      var FR = parseFloat(parseFloat(wert2FR) + parseFloat(wert5)).toFixed(3);\n      var wert1BL = air_pressureBL * (airTemperatureUpdate + variable1);\n      var wert2BL = parseFloat(wert1BL / (airTemperature + variable2)).toFixed(4);\n      var BL = parseFloat(parseFloat(wert2BL) + parseFloat(wert5)).toFixed(3);\n      var wert1BR = air_pressureBR * (airTemperatureUpdate + variable1);\n      var wert2BR = parseFloat(wert1BR / (airTemperature + variable2)).toFixed(4);\n      var BR = parseFloat(parseFloat(wert2BR) + parseFloat(wert5)).toFixed(3);\n\n      _this.setState({\n        air_pressureFL1: FL\n      });\n\n      _this.setState({\n        air_pressureFR1: FR\n      });\n\n      _this.setState({\n        air_pressureBL1: BL\n      });\n\n      _this.setState({\n        air_pressureBR1: BR\n      });\n    };\n\n    _this.handleSubmit1 = function (event) {\n      event.preventDefault();\n      var bleed1 = parseFloat(_this.state.anpassungsKonstante) * (parseFloat(_this.state.trackTemperatureUpdate) - parseFloat(_this.state.trackTemperature));\n      var bleedZwischenwert1 = parseFloat(bleed1 * (parseFloat(_this.state.heizTemperatur) + parseFloat(_this.state.variable1)) / (parseFloat(_this.state.airTemperatureUpdate) + parseFloat(_this.state.variable2))).toFixed(3);\n      console.log(bleedZwischenwert1);\n      var bleedZwischenwert3 = parseFloat(parseFloat(_this.state.variable3) * (parseFloat(_this.state.heizTemperatur) - parseFloat(_this.state.airTemperatureUpdate)) / (parseFloat(_this.state.airTemperatureUpdate) + parseFloat(_this.state.variable4))).toFixed(3);\n      var bleed2 = parseFloat(parseFloat(bleedZwischenwert1) + parseFloat(bleedZwischenwert3)).toFixed(3);\n      var bleedString1 = bleed1.toString() + \" bar\";\n      var bleedString2 = bleed2.toString() + \" bar\";\n\n      _this.setState({\n        bleed1: bleed1\n      });\n\n      _this.setState({\n        bleedString1: bleedString1\n      });\n\n      _this.setState({\n        bleed2: bleed2\n      });\n\n      _this.setState({\n        bleedString2: bleedString2\n      });\n    };\n\n    _this.state = {\n      raceID: -1,\n      variable1: 0,\n      variable2: 0,\n      variable3: 0,\n      variable4: 0,\n      air_pressureFL: 0,\n      air_pressureFR: 0,\n      air_pressureBL: 0,\n      air_pressureBR: 0,\n      air_pressureFL1: \"\",\n      air_pressureFR1: \"\",\n      air_pressureBL1: \"\",\n      air_pressureBR1: \"\",\n      airTemperature: 0,\n      airTemperatureUpdate: \"\",\n      trackTemperature: 0,\n      trackTemperatureUpdate: \"\",\n      bleed1: 0,\n      bleedString1: \"\",\n      bleed2: 0,\n      bleedString2: \"\",\n      anpassungsKonstante: \"\",\n      heizTemperatur: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(AstridScreen, [{\n    key: \"validateForm\",\n    value: function validateForm() {\n      return this.state.airTemperatureUpdate != \"\";\n    }\n  }, {\n    key: \"validateForm1\",\n    value: function validateForm1() {\n      return this.state.heizTemperatur != \"\" && this.state.anpassungsKonstante != \"\" && this.state.airTemperatureUpdate != \"\" && this.state.trackTemperatureUpdate != \"\" && this.state.air_pressureFL1 != \"\" && this.state.air_pressureFR1 != \"\" && this.state.air_pressureBL1 != \"\" && this.state.air_pressureBR1 != \"\";\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var accesstoken, raceID, variable1, variable2, variable3, variable4, air_pressureFL, air_pressureFR, air_pressureBL, air_pressureBR, airTemperature, trackTemperature, bleed1, bleed2, bleedString1, bleedString2, air_pressureFL1, air_pressureFR1, air_pressureBL1, air_pressureBR1, airTemperatureUpdate, heizTemperatur;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('acesstoken'));\n\n            case 2:\n              accesstoken = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context.sent;\n              console.log(raceID);\n              this.setState({\n                raceID: raceID\n              });\n              variable1 = 273.15;\n              variable2 = 273.15;\n              variable3 = 1.013;\n              variable4 = 273.15;\n              air_pressureFL = 1.36;\n              air_pressureFR = 1.4;\n              air_pressureBL = 1.2;\n              air_pressureBR = 1.27;\n              airTemperature = 20;\n              trackTemperature = 10;\n              this.setState({\n                variable1: variable1\n              });\n              this.setState({\n                variable2: variable2\n              });\n              this.setState({\n                variable3: variable3\n              });\n              this.setState({\n                variable4: variable4\n              });\n              this.setState({\n                air_pressureFL: air_pressureFL\n              });\n              this.setState({\n                air_pressureFR: air_pressureFR\n              });\n              this.setState({\n                air_pressureBL: air_pressureBL\n              });\n              this.setState({\n                air_pressureBR: air_pressureBR\n              });\n              this.setState({\n                airTemperature: airTemperature\n              });\n              this.setState({\n                trackTemperature: trackTemperature\n              });\n              bleed1 = \"\";\n              bleed2 = \"\";\n              bleedString1 = bleed1.toString() + \" bar\";\n              bleedString2 = bleed2.toString() + \" bar\";\n              air_pressureFL1 = \"\";\n              air_pressureFR1 = \"\";\n              air_pressureBL1 = \"\";\n              air_pressureBR1 = \"\";\n              airTemperatureUpdate = \"\";\n              heizTemperatur = \"\";\n              this.setState({\n                bleed1: bleed1\n              });\n              this.setState({\n                bleedString1: bleedString1\n              });\n              this.setState({\n                bleed2: bleed2\n              });\n              this.setState({\n                bleedString2: bleedString2\n              });\n              this.setState({\n                air_pressureFL1: air_pressureFL1\n              });\n              this.setState({\n                air_pressureFR1: air_pressureFR1\n              });\n              this.setState({\n                air_pressureBL1: air_pressureBL1\n              });\n              this.setState({\n                air_pressureBR1: air_pressureBR1\n              });\n              this.setState({\n                airTemperatureUpdate: airTemperatureUpdate\n              });\n              this.setState({\n                heizTemperatur: heizTemperatur\n              });\n\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: {\n          overflowY: 'scroll',\n          flex: 1\n        }\n      }, React.createElement(\"div\", {\n        className: \"container\"\n      }, React.createElement(\"br\", null), React.createElement(\"h1\", null, \"Kaltdruck Berechnung\"), React.createElement(\"br\", null), this.state.air_pressureBR1 == 0 && React.createElement(\"div\", {\n        className: \"input-group\",\n        style: {\n          width: '70%'\n        }\n      }, React.createElement(\"span\", {\n        className: \"input-group-text\"\n      }, \"Felgentemperatur: \"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        \"aria-label\": \"Server\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            airTemperatureUpdate: e.target.value\n          });\n        },\n        value: this.state.airTemperatureUpdate\n      }), React.createElement(\"button\", {\n        disabled: !this.validateForm(),\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: this.handleSubmit\n      }, \"Kaltdruck berechnen\")), React.createElement(\"br\", null), this.state.airTemperatureUpdate == \"\" ? React.createElement(\"h3\", null, \"An die gemessene Felgentemperatur angepasste Kaltdruckwerte:\") : React.createElement(\"h3\", null, \"An die gemessene Felgentemperatur von \", this.state.airTemperatureUpdate, \" Grad angepasste Kaltdruckwerte:\"), React.createElement(\"table\", {\n        className: \"table table-striped table-hover\"\n      }, React.createElement(\"thead\", null), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, React.createElement(\"th\", {\n        scope: \"row\"\n      }, \"air_pressureFL\"), React.createElement(\"td\", null, this.state.air_pressureFL1)), React.createElement(\"tr\", null, React.createElement(\"th\", {\n        scope: \"row\"\n      }, \"air_pressureFR\"), React.createElement(\"td\", null, this.state.air_pressureFR1)), React.createElement(\"tr\", null, React.createElement(\"th\", {\n        scope: \"row\"\n      }, \"air_pressureBL\"), React.createElement(\"td\", null, this.state.air_pressureBL1)), React.createElement(\"tr\", null, React.createElement(\"th\", {\n        scope: \"row\"\n      }, \"air_pressureBR\"), React.createElement(\"td\", null, this.state.air_pressureBR1)))), React.createElement(\"br\", null), this.state.bleed2 == 0 && React.createElement(\"div\", null, React.createElement(\"div\", {\n        className: \"input-group\",\n        style: {\n          width: '70%'\n        }\n      }, React.createElement(\"span\", {\n        className: \"input-group-text\"\n      }, \"Streckentemperatur: \"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        \"aria-label\": \"Server\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            trackTemperatureUpdate: e.target.value\n          });\n        },\n        value: this.state.trackTemperatureUpdate\n      }), React.createElement(\"button\", {\n        disabled: !this.validateForm1(),\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: this.handleSubmit1\n      }, \"Bleed berechnen\")), React.createElement(\"div\", {\n        className: \"input-group\",\n        style: {\n          width: '70%'\n        }\n      }, React.createElement(\"span\", {\n        className: \"input-group-text\"\n      }, \"Anpassungskonstante: \"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        \"aria-label\": \"Server\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            anpassungsKonstante: e.target.value\n          });\n        },\n        value: this.state.anpassungsKonstante\n      })), React.createElement(\"div\", {\n        className: \"input-group\",\n        style: {\n          width: '70%'\n        }\n      }, React.createElement(\"span\", {\n        className: \"input-group-text\"\n      }, \"Heiztemperatur: \"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        \"aria-label\": \"Server\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            heizTemperatur: e.target.value\n          });\n        },\n        value: this.state.heizTemperatur\n      }))), React.createElement(\"br\", null), React.createElement(\"h3\", null, \"Bleed:\"), React.createElement(\"table\", {\n        className: \"table\"\n      }, React.createElement(\"thead\", null), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, React.createElement(\"th\", {\n        scope: \"row\"\n      }, \"Bleed Initialwert:\"), React.createElement(\"td\", null, this.state.bleedString1)), React.createElement(\"tr\", null, React.createElement(\"th\", {\n        scope: \"row\"\n      }, \"Bleedwert mit Ber\\xFCcksichtigung der Heiztemperatur:\"), React.createElement(\"td\", null, this.state.bleedString2)))), React.createElement(\"br\", null), React.createElement(\"div\", {\n        class: \"alert alert-secondary\",\n        role: \"alert\"\n      }, React.createElement(\"h4\", null, \" Verwendete Angaben des Ingenierurs: \"), React.createElement(\"hr\", null), React.createElement(\"p\", null, \"Pa = angegebener Kaltdruck, Tg = gemessene Temperatur, Ta = angegebene Temperatur\"), React.createElement(\"p\", null, \"Formel: Pa*(Tg+\", this.state.variable1, \")/(Ta+\", this.state.variable2, \")+\", this.state.variable3, \"*(Tg-Ta)/(Ta+\", this.state.variable4, \")\"), React.createElement(\"hr\", null), React.createElement(\"p\", null, \"Air Temperature : \", this.state.airTemperature), React.createElement(\"p\", null, \"Track Temperature: \", this.state.trackTemperature), React.createElement(\"p\", null, \"air_pressureFL: \", this.state.air_pressureFL, \" \"), React.createElement(\"p\", null, \"air_pressureFR: \", this.state.air_pressureFR), React.createElement(\"p\", null, \"air_pressureBL: \", this.state.air_pressureBL), React.createElement(\"p\", null, \"air_pressureBR: \", this.state.air_pressureBR))), React.createElement(Button, {\n        title: \"zur\\xFCck\",\n        onPress: this.changeRace\n      }));\n    }\n  }]);\n\n  return AstridScreen;\n}(React.Component);\n\nexport { AstridScreen as default };","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/Astrid.js"],"names":["React","styles","AsyncStorage","timeoutPromise","refreshToken","syncData","getRaceList","getFormelList","AstridScreen","props","changeRace","event","preventDefault","navigation","goBack","handleSubmit","airTemperatureUpdate","parseFloat","state","airTemperature","variable1","variable2","variable3","variable4","air_pressureFL","air_pressureFR","air_pressureBL","air_pressureBR","wert1FL","wert2FL","toFixed","wert3","wert4","wert5","FL","wert1FR","wert2FR","FR","wert1BL","wert2BL","BL","wert1BR","wert2BR","BR","setState","air_pressureFL1","air_pressureFR1","air_pressureBL1","air_pressureBR1","handleSubmit1","bleed1","anpassungsKonstante","trackTemperatureUpdate","trackTemperature","bleedZwischenwert1","heizTemperatur","console","log","bleedZwischenwert3","bleed2","bleedString1","toString","bleedString2","raceID","getItem","accesstoken","overflowY","flex","width","e","target","value","validateForm","validateForm1","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Button, Text, TextInput, ToastAndroid, View} from \"react-native\";\nimport {styles} from \"./styles\"\n//import { AsyncStorage } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {timeoutPromise, refreshToken, syncData, getRaceList,getFormelList} from \"./tools\";\n\nexport default class AstridScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            raceID: -1,\n            variable1: 0,\n            variable2: 0,\n            variable3: 0,\n            variable4: 0,\n            air_pressureFL: 0,\n            air_pressureFR: 0,\n            air_pressureBL: 0,\n            air_pressureBR: 0,\n            air_pressureFL1: \"\",\n            air_pressureFR1: \"\",\n            air_pressureBL1: \"\",\n            air_pressureBR1: \"\",\n            airTemperature: 0,\n            airTemperatureUpdate: \"\",\n            trackTemperature: 0,\n            trackTemperatureUpdate:\"\",\n            //Bleed der die Streckentemperatur berücksichtigt\n            bleed1: 0,\n            bleedString1:\"\",\n            //bleed der Streckentemperatur und Heiztemperatur berücksichtigt\n            bleed2: 0,\n            bleedString2: \"\",\n            anpassungsKonstante: \"\",\n            heizTemperatur: \"\",\n        }\n    }\n\n    changeRace = event => {\n        event.preventDefault();\n        this.props.navigation.goBack();\n    }\n\n    validateForm() {\n       return this.state.airTemperatureUpdate!=\"\";\n    }\n    validateForm1(){\n        return this.state.heizTemperatur!=\"\"&&this.state.anpassungsKonstante!=\"\"&&this.state.airTemperatureUpdate!=\"\"&&this.state.trackTemperatureUpdate!=\"\" && this.state.air_pressureFL1!=\"\"&&this.state.air_pressureFR1!=\"\"&&this.state.air_pressureBL1!=\"\"&&this.state.air_pressureBR1!=\"\";\n\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n       const airTemperatureUpdate= parseFloat(this.state.airTemperatureUpdate);\n       const airTemperature= parseFloat(this.state.airTemperature);\n       const variable1= parseFloat(this.state.variable1);\n       const variable2= parseFloat(this.state.variable2);\n       const variable3= parseFloat(this.state.variable3);\n       const variable4= parseFloat(this.state.variable4);\n       const air_pressureFL= parseFloat(this.state.air_pressureFL);\n       const air_pressureFR= parseFloat(this.state.air_pressureFR);\n       const air_pressureBL= parseFloat(this.state.air_pressureBL);\n       const air_pressureBR= parseFloat(this.state.air_pressureBR);\n\n       const wert1FL= air_pressureFL*(airTemperatureUpdate+variable1);\n       const wert2FL=parseFloat(wert1FL/(airTemperature+variable2)).toFixed(4);\n       const wert3=variable3*(airTemperatureUpdate-airTemperature);\n       const wert4=airTemperature+variable4;\n       const wert5=parseFloat(wert3/wert4).toFixed(4);\n       const FL=parseFloat(parseFloat(wert2FL)+parseFloat(wert5)).toFixed(3);\n\n       const wert1FR= air_pressureFR*(airTemperatureUpdate+variable1);\n       const wert2FR=parseFloat(wert1FR/(airTemperature+variable2)).toFixed(4);\n       const FR=parseFloat(parseFloat(wert2FR)+parseFloat(wert5)).toFixed(3);\n\n       const wert1BL= air_pressureBL*(airTemperatureUpdate+variable1);\n       const wert2BL=parseFloat(wert1BL/(airTemperature+variable2)).toFixed(4);\n       const BL=parseFloat(parseFloat(wert2BL)+parseFloat(wert5)).toFixed(3);\n\n       const wert1BR= air_pressureBR*(airTemperatureUpdate+variable1);\n       const wert2BR=parseFloat(wert1BR/(airTemperature+variable2)).toFixed(4);\n       const BR=parseFloat(parseFloat(wert2BR)+parseFloat(wert5)).toFixed(3);\n\n       this.setState({air_pressureFL1: FL});\n       this.setState({air_pressureFR1: FR});\n       this.setState({air_pressureBL1: BL});\n       this.setState({air_pressureBR1: BR});\n    }\n\n     handleSubmit1 = event => {\n        event.preventDefault();\n        const bleed1= parseFloat(this.state.anpassungsKonstante)*(parseFloat(this.state.trackTemperatureUpdate)-parseFloat(this.state.trackTemperature));\n        const bleedZwischenwert1= parseFloat(bleed1*(parseFloat(this.state.heizTemperatur)+parseFloat(this.state.variable1))/(parseFloat(this.state.airTemperatureUpdate)+parseFloat(this.state.variable2))).toFixed(3);\n        console.log(bleedZwischenwert1);\n        const bleedZwischenwert3=parseFloat(parseFloat(this.state.variable3)*(parseFloat(this.state.heizTemperatur)-parseFloat(this.state.airTemperatureUpdate))/(parseFloat(this.state.airTemperatureUpdate)+parseFloat(this.state.variable4))).toFixed(3);\n        const bleed2= parseFloat(parseFloat(bleedZwischenwert1)+parseFloat(bleedZwischenwert3)).toFixed(3);\n        const bleedString1=bleed1.toString()+\" bar\";\n        const bleedString2=bleed2.toString()+\" bar\";\n        this.setState({bleed1: bleed1});\n        this.setState({bleedString1:bleedString1});\n        this.setState({bleed2: bleed2});\n        this.setState({bleedString2:bleedString2});\n\n\n    }\n\n\n\n    async componentDidMount() {\n        const accesstoken = await AsyncStorage.getItem('acesstoken');\n        const raceID= await AsyncStorage.getItem('raceID');\n        console.log(raceID);\n        this.setState({raceID: raceID});\n        //Funktion aufrufen für Formelwerte\n        const variable1= 273.15;\n        const variable2= 273.15;\n        const variable3= 1.013;\n        const variable4= 273.15;\n        const air_pressureFL= 1.36;\n        const air_pressureFR= 1.4;\n        const air_pressureBL= 1.2;\n        const air_pressureBR= 1.27;\n        const airTemperature= 20;\n        const trackTemperature= 10;\n\n        this.setState({variable1: variable1});\n        this.setState({variable2: variable2});\n        this.setState({variable3: variable3});\n        this.setState({variable4: variable4});\n        this.setState({air_pressureFL: air_pressureFL});\n        this.setState({air_pressureFR: air_pressureFR});\n        this.setState({air_pressureBL: air_pressureBL});\n        this.setState({air_pressureBR: air_pressureBR});\n        this.setState({airTemperature: airTemperature});\n        this.setState({trackTemperature: trackTemperature});\n\n        //Funktion aufrufen für möglicherweise bereits eingegeben und berechnete Werte\n        const bleed1=\"\";\n        const bleed2=\"\";\n        const bleedString1=bleed1.toString()+\" bar\";\n        const bleedString2=bleed2.toString()+\" bar\";\n        const air_pressureFL1= \"\";\n        const air_pressureFR1= \"\";\n        const air_pressureBL1= \"\";\n        const air_pressureBR1= \"\";\n        const airTemperatureUpdate= \"\";\n        const heizTemperatur=\"\";\n\n        this.setState({bleed1: bleed1});\n        this.setState({bleedString1:bleedString1});\n        this.setState({bleed2: bleed2});\n        this.setState({bleedString2:bleedString2});\n        this.setState({air_pressureFL1: air_pressureFL1});\n        this.setState({air_pressureFR1: air_pressureFR1});\n        this.setState({air_pressureBL1: air_pressureBL1});\n        this.setState({air_pressureBR1: air_pressureBR1});\n        this.setState({airTemperatureUpdate: airTemperatureUpdate});\n        this.setState({heizTemperatur:heizTemperatur});\n        }\n\n\n\n    render() {\n\n     return(\n         <View style={{ overflowY: 'scroll', flex:1}}>\n         <div className=\"container\" >\n             <br></br>\n         <h1>Kaltdruck Berechnung</h1>\n             <br></br>\n             {this.state.air_pressureBR1 == 0 &&\n             <div className=\"input-group\" style={{width: '70%'}}>\n                 <span className=\"input-group-text\">Felgentemperatur: </span>\n                 <input type=\"text\" className=\"form-control\" aria-label=\"Server\"\n                        onChange={(e) => this.setState({airTemperatureUpdate: e.target.value})}\n                        value={this.state.airTemperatureUpdate}></input>\n                 <button disabled={!this.validateForm()} type=\"button\" className=\"btn btn-primary\"\n                         onClick={this.handleSubmit}>Kaltdruck berechnen\n                 </button>\n             </div>\n             }\n              <br></br>\n             {this.state.airTemperatureUpdate==\"\" ? <h3>An die gemessene Felgentemperatur angepasste Kaltdruckwerte:</h3> : <h3>An die gemessene Felgentemperatur von {this.state.airTemperatureUpdate} Grad angepasste Kaltdruckwerte:</h3> }\n\n             <table className=\"table table-striped table-hover\">\n                 <thead>\n                 </thead>\n                 <tbody>\n                 <tr>\n                     <th scope=\"row\">air_pressureFL</th>\n                     <td>{this.state. air_pressureFL1}</td>\n                 </tr>\n                 <tr>\n                     <th scope=\"row\">air_pressureFR</th>\n                     <td>{this.state. air_pressureFR1}</td>\n                 </tr>\n                <tr>\n                     <th scope=\"row\">air_pressureBL</th>\n                     <td>{this.state. air_pressureBL1}</td>\n                 </tr>\n                 <tr>\n                     <th scope=\"row\">air_pressureBR</th>\n                     <td>{this.state. air_pressureBR1}</td>\n                 </tr>\n                 </tbody>\n             </table>\n             <br></br>\n             {this.state.bleed2 == 0 &&\n             <div>\n                 <div className=\"input-group\" style={{width: '70%'}}>\n                     <span className=\"input-group-text\">Streckentemperatur: </span>\n                     <input type=\"text\" className=\"form-control\" aria-label=\"Server\"\n                            onChange={(e) => this.setState({trackTemperatureUpdate: e.target.value})}\n                            value={this.state.trackTemperatureUpdate}></input>\n                     <button disabled={!this.validateForm1()} type=\"button\" className=\"btn btn-primary\"\n                             onClick={this.handleSubmit1}>Bleed berechnen\n                     </button>\n                 </div>\n                 <div className=\"input-group\" style={{width: '70%'}}>\n                     <span className=\"input-group-text\">Anpassungskonstante: </span>\n                     <input type=\"text\" className=\"form-control\" aria-label=\"Server\"\n                            onChange={(e) => this.setState({anpassungsKonstante: e.target.value})}\n                            value={this.state.anpassungsKonstante}></input>\n                 </div>\n                 <div className=\"input-group\" style={{width: '70%'}}>\n                     <span className=\"input-group-text\">Heiztemperatur: </span>\n                     <input type=\"text\" className=\"form-control\" aria-label=\"Server\"\n                            onChange={(e) => this.setState({heizTemperatur: e.target.value})}\n                            value={this.state.heizTemperatur}></input>\n                 </div>\n             </div>\n             }\n              <br></br>\n             <h3>Bleed:</h3>\n             <table className=\"table\">\n                 <thead>\n                 </thead>\n                 <tbody>\n                 <tr>\n                     <th scope=\"row\">Bleed Initialwert:</th>\n                     <td>{this.state.bleedString1}</td>\n                 </tr>\n                  <tr>\n                     <th scope=\"row\">Bleedwert mit Berücksichtigung der Heiztemperatur:</th>\n                     <td>{this.state.bleedString2}</td>\n                 </tr>\n                 </tbody>\n             </table>\n             <br></br>\n             <div class=\"alert alert-secondary\" role=\"alert\">\n                 <h4> Verwendete Angaben des Ingenierurs: </h4>\n                 <hr></hr>\n                 <p>Pa = angegebener Kaltdruck, Tg = gemessene Temperatur, Ta = angegebene Temperatur</p>\n                 <p>Formel: Pa*(Tg+{this.state.variable1})/(Ta+{this.state.variable2})+{this.state.variable3}*(Tg-Ta)/(Ta+{this.state.variable4})</p>\n                 <hr></hr>\n                 <p>Air Temperature : {this.state.airTemperature}</p>\n                  <p>Track Temperature: {this.state.trackTemperature}</p>\n                   <p>air_pressureFL: {this.state.air_pressureFL} </p>\n                   <p>air_pressureFR: {this.state.air_pressureFR}</p>\n                   <p>air_pressureBL: {this.state.air_pressureBL}</p>\n                    <p>air_pressureBR: {this.state.air_pressureBR}</p>\n             </div>\n             </div>\n              <Button\n                        title=\"zurück\"\n                        onPress={this.changeRace}\n                />\n          </View>\n\n\n        );\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}