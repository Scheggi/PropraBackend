{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"./styles\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { timeoutPromise, refreshToken, getRaceList, changeWheelSet } from \"./tools\";\nimport { get_Dict_WheelOrder, getDropdown, getWheelSetInformation } from \"./tools_get_wheels\";\n\nvar NewOrderScreen = function (_React$Component) {\n  _inherits(NewOrderScreen, _React$Component);\n\n  var _super = _createSuper(NewOrderScreen);\n\n  function NewOrderScreen(props) {\n    var _this;\n\n    _classCallCheck(this, NewOrderScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      wheels: [],\n      dictButtons: [],\n      Dropdownlist: [],\n      ButtonsList: ['Slicks Cold', 'Slicks Medium', 'Slicks Hot', 'Inters Intermediate', 'Rain DryWet', 'Rain HeavyWet']\n    };\n    return _this;\n  }\n\n  _createClass(NewOrderScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context.sent;\n              console.log(raceID);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(this.getWheelDict());\n\n            case 9:\n              console.log(this.state.dictButtons);\n              this.refresh_Buttons();\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(this.getWheelData());\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getWheelDict\",\n    value: function getWheelDict() {\n      var _this2 = this;\n\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function getWheelDict$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context2.sent;\n              console.log(raceID);\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(get_Dict_WheelOrder(accesstoken, raceID).then(function (DataTabular) {\n                console.log(DataTabular);\n\n                _this2.setState({\n                  dictButtons: DataTabular\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 9:\n              console.log(this.state.dictButtons);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: viewStyles1\n      }, React.createElement(Button, {\n        title: \"zur\\xFCck\",\n        onPress: this.changeRace\n      }));\n    }\n  }]);\n\n  return NewOrderScreen;\n}(React.Component);\n\nexport { NewOrderScreen as default };","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/NewOrder.js"],"names":["React","styles","AsyncStorage","timeoutPromise","refreshToken","getRaceList","changeWheelSet","get_Dict_WheelOrder","getDropdown","getWheelSetInformation","NewOrderScreen","props","state","wheels","dictButtons","Dropdownlist","ButtonsList","getItem","accesstoken","raceID","console","log","getWheelDict","refresh_Buttons","getWheelData","then","DataTabular","setState","catch","error","viewStyles1","changeRace","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;AAEA,SAAQC,MAAR;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,EAAqCC,WAArC,EAAiDC,cAAjD;AACA,SAAQC,mBAAR,EAA6BC,WAA7B,EAAyCC,sBAAzC;;IAEqBC,c;;;;;AAClB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,WAAW,EAAC,EAFH;AAGTC,MAAAA,YAAY,EAAG,EAHN;AAITC,MAAAA,WAAW,EAAG,CAAC,aAAD,EAAe,eAAf,EAAgC,YAAhC,EAA8C,qBAA9C,EAAqE,aAArE,EAAoF,eAApF;AAJL,KAAb;AAFc;AASjB;;;;WAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC6Bd,YAAY,CAACe,OAAb,CAAqB,aAArB,CAD7B;;AAAA;AACSC,cAAAA,WADT;AAAA;AAAA,+CAEwBhB,YAAY,CAACe,OAAb,CAAqB,QAArB,CAFxB;;AAAA;AAESE,cAAAA,MAFT;AAGGC,cAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHH;AAAA,+CAIS,KAAKG,YAAL,EAJT;;AAAA;AAKGF,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWE,WAAvB;AACC,mBAAKS,eAAL;AANJ;AAAA,+CAOS,KAAKC,YAAL,EAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAWD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC6BtB,YAAY,CAACe,OAAb,CAAqB,aAArB,CAD7B;;AAAA;AACSC,cAAAA,WADT;AAAA;AAAA,+CAEwBhB,YAAY,CAACe,OAAb,CAAqB,QAArB,CAFxB;;AAAA;AAESE,cAAAA,MAFT;AAGGC,cAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHH;AAAA,+CAISZ,mBAAmB,CAACW,WAAD,EAAcC,MAAd,CAAnB,CAAyCM,IAAzC,CAA8C,UAAAC,WAAW,EAAI;AAC1DN,gBAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;;AACA,gBAAA,MAAI,CAACC,QAAL,CAAc;AAACb,kBAAAA,WAAW,EAAEY;AAAd,iBAAd;AACH,eAHA,EAGEE,KAHF,CAGQ,UAAUC,KAAV,EAAiB;AACtBT,gBAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH,eALA,CAJT;;AAAA;AAUIT,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWE,WAAvB;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAcI,kBAAS;AACT,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEgB;AAAb,SACI,oBAAC,MAAD;AACQ,QAAA,KAAK,EAAC,WADd;AAEQ,QAAA,OAAO,EAAE,KAAKC;AAFtB,QADJ,CADJ;AASH;;;;EA/CuC/B,KAAK,CAACgC,S;;SAA7BtB,c","sourcesContent":["import React from \"react\";\nimport {Button, Text, TextInput, ToastAndroid,ScrollView, View} from \"react-native\";\nimport {styles} from \"./styles\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {timeoutPromise, refreshToken,getRaceList,changeWheelSet} from \"./tools\";\nimport {get_Dict_WheelOrder, getDropdown,getWheelSetInformation} from \"./tools_get_wheels\";\n\nexport default class NewOrderScreen extends React.Component {\n   constructor(props) {\n        super(props);\n        this.state = {\n            wheels: [],\n            dictButtons:[],\n            Dropdownlist : [],\n            ButtonsList : ['Slicks Cold','Slicks Medium', 'Slicks Hot', 'Inters Intermediate', 'Rain DryWet', 'Rain HeavyWet'],\n\n        }\n    }\n\n     async componentDidMount(){\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        console.log(raceID)\n        await this.getWheelDict();\n        console.log(this.state.dictButtons)\n         this.refresh_Buttons()\n        await this.getWheelData()\n    }\n\n    //get Wheel Data\n    async getWheelDict(){\n       const accesstoken = await AsyncStorage.getItem('accesstoken');\n       const raceID = await AsyncStorage.getItem('raceID');\n       console.log(raceID)\n       await get_Dict_WheelOrder(accesstoken, raceID).then(DataTabular => {\n                console.log(DataTabular);\n                this.setState({dictButtons: DataTabular});\n            }).catch(function (error) {\n                console.log(error);\n            })\n        console.log(this.state.dictButtons)\n    }\n\n\n        render() {\n        return (\n            <View style={viewStyles1}>\n                <Button\n                        title=\"zurÃ¼ck\"\n                        onPress={this.changeRace}\n                />\n\n            </View>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}