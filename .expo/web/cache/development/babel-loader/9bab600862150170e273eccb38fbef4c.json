{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"./styles\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { timeoutPromise, refreshToken, getRaceList } from \"./tools\";\nexport var NavScreen = function (_React$Component) {\n  _inherits(NavScreen, _React$Component);\n\n  var _super = _createSuper(NavScreen);\n\n  function NavScreen(props) {\n    _classCallCheck(this, NavScreen);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(NavScreen, [{\n    key: \"checkGroup\",\n    value: function checkGroup() {\n      var group;\n      return _regeneratorRuntime.async(function checkGroup$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"usergroup\"));\n\n            case 2:\n              group = _context.sent;\n\n              if (group === \"Helper\") {\n                this.props.navigation.replace(\"Helper\");\n              }\n\n              if (group === \"Ingenieur\") {\n                this.props.navigation.replace(\"Wetter\");\n              }\n\n              if (group === \"Manager\") {\n                this.props.navigation.replace(\"Manager\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              try {\n                this.focusListener = this.props.navigation.addListener('didFocus', function () {\n                  _this.checkGroup();\n                });\n              } catch (e) {\n                ToastAndroid.show(e, ToastAndroid.SHORT);\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.focusListener.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flex: 0.9,\n          alignItems: 'center',\n          justifyContent: 'center'\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 30,\n          fontWeight: 'bold',\n          textAlign: 'center'\n        }\n      }, \"Reifenmanagement\"));\n    }\n  }]);\n\n  return NavScreen;\n}(React.Component);","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/NavScreen.js"],"names":["React","styles","AsyncStorage","timeoutPromise","refreshToken","getRaceList","NavScreen","props","getItem","group","navigation","replace","focusListener","addListener","checkGroup","e","ToastAndroid","show","SHORT","remove","flex","alignItems","justifyContent","fontSize","fontWeight","textAlign","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAAQC,MAAR;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,EAAqCC,WAArC;AAGA,WAAaC,SAAb;AAAA;;AAAA;;AACI,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,6BACTA,KADS;AAElB;;AAHL;AAAA;AAAA,WAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBL,YAAY,CAACM,OAAb,CAAqB,WAArB,CADxB;;AAAA;AACUC,cAAAA,KADV;;AAEI,kBAAIA,KAAK,KAAG,QAAZ,EAAqB;AACjB,qBAAKF,KAAL,CAAWG,UAAX,CAAsBC,OAAtB,CAA8B,QAA9B;AACH;;AACD,kBAAIF,KAAK,KAAG,WAAZ,EAAwB;AACpB,qBAAKF,KAAL,CAAWG,UAAX,CAAsBC,OAAtB,CAA8B,QAA9B;AACH;;AACD,kBAAIF,KAAK,KAAG,SAAZ,EAAsB;AAClB,qBAAKF,KAAL,CAAWG,UAAX,CAAsBC,OAAtB,CAA8B,SAA9B;AACH;;AAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA,WAkBI;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI,kBAAI;AACE,qBAAKC,aAAL,GAAqB,KAAKL,KAAL,CAAWG,UAAX,CAAsBG,WAAtB,CAAkC,UAAlC,EAA8C,YAAM;AACnE,kBAAA,KAAI,CAACC,UAAL;AACP,iBAFsB,CAArB;AAIL,eALD,CAKE,OAAOC,CAAP,EAAU;AACJC,gBAAAA,YAAY,CAACC,IAAb,CAAkBF,CAAlB,EAAqBC,YAAY,CAACE,KAAlC;AACP;;AARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBJ;AAAA;AAAA,WA6BI,gCAAwB;AACpB,WAAKN,aAAL,CAAmBO,MAAnB;AACH;AA/BL;AAAA;AAAA,WAiCI,kBAAS;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,IAAI,EAAE,GAAP;AAAYC,UAAAA,UAAU,EAAE,QAAxB;AAAkCC,UAAAA,cAAc,EAAE;AAAlD;AAAb,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,UAAU,EAAE,MAA3B;AAAmCC,UAAAA,SAAS,EAAE;AAA9C;AAAb,4BADJ,CADJ;AAOH;AAzCL;;AAAA;AAAA,EAA+BzB,KAAK,CAAC0B,SAArC","sourcesContent":["import React from \"react\";\nimport {Text, ToastAndroid, View} from \"react-native\";\nimport {styles} from \"./styles\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {timeoutPromise, refreshToken,getRaceList} from \"./tools\";\n\n\nexport class NavScreen extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async checkGroup(){\n        const group = await AsyncStorage.getItem(\"usergroup\");\n        if (group===\"Helper\"){\n            this.props.navigation.replace(\"Helper\")\n        }\n        if (group===\"Ingenieur\"){\n            this.props.navigation.replace(\"Wetter\")\n        }\n        if (group===\"Manager\"){\n            this.props.navigation.replace(\"Manager\")\n        }\n    }\n\n    async componentDidMount() {\n        try {\n              this.focusListener = this.props.navigation.addListener('didFocus', () => {\n                    this.checkGroup()\n            })\n\n        } catch (e) {\n                ToastAndroid.show(e, ToastAndroid.SHORT);\n        }\n\n    }\n    componentWillUnmount () {\n        this.focusListener.remove()\n    }\n\n    render() {\n        return (\n            <View style={{flex: 0.9, alignItems: 'center', justifyContent: 'center'}}>\n                <Text style={{fontSize: 30, fontWeight: 'bold', textAlign: 'center'}}>\n                    Reifenmanagement\n                </Text>\n            </View>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}