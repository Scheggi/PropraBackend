{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"./styles\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { timeoutPromise, refreshToken, getRaceList } from \"./tools\";\nexport var SplashScreen = function (_React$Component) {\n  _inherits(SplashScreen, _React$Component);\n\n  var _super = _createSuper(SplashScreen);\n\n  function SplashScreen(props) {\n    _classCallCheck(this, SplashScreen);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(SplashScreen, [{\n    key: \"checkLogin\",\n    value: function checkLogin() {\n      var accesstoken, refreshtoken;\n      return _regeneratorRuntime.async(function checkLogin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('refreshtoken'));\n\n            case 5:\n              refreshtoken = _context.sent;\n\n              if (accesstoken == null) {\n                console.log(accesstoken);\n                this.props.navigation.replace('Login');\n              } else {\n                this.props.navigation.replace('MainNav');\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              try {\n                this.focusListener = this.props.navigation.addListener('didFocus', function () {\n                  _this.checkLogin();\n                });\n              } catch (e) {\n                ToastAndroid.show(e, ToastAndroid.SHORT);\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.focusListener.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.viewStyles\n      }, React.createElement(Text, {\n        style: styles.textStyles\n      }, \"Reifenmanagement\"));\n    }\n  }]);\n\n  return SplashScreen;\n}(React.Component);","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/SplashScreen.js"],"names":["React","styles","AsyncStorage","timeoutPromise","refreshToken","getRaceList","SplashScreen","props","getItem","accesstoken","refreshtoken","console","log","navigation","replace","focusListener","addListener","checkLogin","e","ToastAndroid","show","SHORT","remove","viewStyles","textStyles","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAAQC,MAAR;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,EAAqCC,WAArC;AAGA,WAAaC,YAAb;AAAA;;AAAA;;AACI,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,6BACTA,KADS;AAElB;;AAHL;AAAA;AAAA,WAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACkCL,YAAY,CAACM,OAAb,CAAqB,aAArB,CADlC;;AAAA;AACcC,cAAAA,WADd;AAAA;AAAA,+CAEmCP,YAAY,CAACM,OAAb,CAAqB,cAArB,CAFnC;;AAAA;AAEcE,cAAAA,YAFd;;AAGQ,kBAAID,WAAW,IAAI,IAAnB,EAAyB;AACrBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,qBAAKF,KAAL,CAAWM,UAAX,CAAsBC,OAAtB,CAA8B,OAA9B;AACH,eAHD,MAIK;AACD,qBAAKP,KAAL,CAAWM,UAAX,CAAsBC,OAAtB,CAA8B,SAA9B;AACH;;AATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA,WAiBI;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI,kBAAI;AACE,qBAAKC,aAAL,GAAqB,KAAKR,KAAL,CAAWM,UAAX,CAAsBG,WAAtB,CAAkC,UAAlC,EAA8C,YAAM;AACnE,kBAAA,KAAI,CAACC,UAAL;AACP,iBAFsB,CAArB;AAIL,eALD,CAKE,OAAOC,CAAP,EAAU;AACJC,gBAAAA,YAAY,CAACC,IAAb,CAAkBF,CAAlB,EAAqBC,YAAY,CAACE,KAAlC;AACP;;AARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBJ;AAAA;AAAA,WA4BI,gCAAwB;AACpB,WAAKN,aAAL,CAAmBO,MAAnB;AACH;AA9BL;AAAA;AAAA,WAgCI,kBAAS;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAErB,MAAM,CAACsB;AAApB,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEtB,MAAM,CAACuB;AAApB,4BADJ,CADJ;AAOH;AAxCL;;AAAA;AAAA,EAAkCxB,KAAK,CAACyB,SAAxC","sourcesContent":["import React from \"react\";\nimport {Text, ToastAndroid, View} from \"react-native\";\nimport {styles} from \"./styles\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {timeoutPromise, refreshToken,getRaceList} from \"./tools\";\n\n\nexport class SplashScreen extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async checkLogin(){\n            const accesstoken = await AsyncStorage.getItem('accesstoken');\n            const refreshtoken = await AsyncStorage.getItem('refreshtoken');\n            if (accesstoken == null) {\n                console.log(accesstoken)\n                this.props.navigation.replace('Login');\n            }\n            else {\n                this.props.navigation.replace('MainNav');\n            }\n    }\n\n    async componentDidMount() {\n        try {\n              this.focusListener = this.props.navigation.addListener('didFocus', () => {\n                    this.checkLogin()\n            })\n\n        } catch (e) {\n                ToastAndroid.show(e, ToastAndroid.SHORT);\n        }\n\n    }\n    componentWillUnmount () {\n        this.focusListener.remove()\n    }\n\n    render() {\n        return (\n            <View style={styles.viewStyles}>\n                <Text style={styles.textStyles}>\n                    Reifenmanagement\n                </Text>\n            </View>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}