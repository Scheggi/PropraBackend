{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { styles } from \"./styles\";\nimport { getRaceList, getWeatherTab, timeoutPromise, getWheelsList, getRaceDetails_by_ID, getFormelList } from \"./tools\";\nimport { get_Dict_WheelOrder, getDropdown, getWheelSetInformation, getWheelInformations } from \"./tools_get_wheels\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollViewBase from \"react-native-web/dist/exports/ScrollView/ScrollViewBase\";\n\nvar WheelScreen = function (_React$Component) {\n  _inherits(WheelScreen, _React$Component);\n\n  var _super = _createSuper(WheelScreen);\n\n  function WheelScreen(props) {\n    var _this;\n\n    _classCallCheck(this, WheelScreen);\n\n    _this = _super.call(this, props);\n\n    _this.changeRace = function (event) {\n      event.preventDefault();\n\n      _this.props.navigation.goBack();\n    };\n\n    _this.changeView = function (event) {\n      _this.setState({\n        selectedView: event.target.value\n      });\n    };\n\n    _this.state = {\n      list_formel: [],\n      formel: \"\",\n      raceID: 0,\n      dataViews: [{\n        'name': \"Alle Werte\",\n        'id': 1\n      }, {\n        'name': \"Heizdaten\",\n        'id': 2\n      }, {\n        'name': \"Laufleistungen\",\n        'id': 3\n      }, {\n        'name': \"Kalt- und Warmdruckwerte\",\n        'id': 4\n      }],\n      selectedView: 1\n    };\n    return _this;\n  }\n\n  _createClass(WheelScreen, [{\n    key: \"sendNewFormelRequest\",\n    value: function sendNewFormelRequest(formel) {\n      var _this2 = this;\n\n      return _regeneratorRuntime.async(function sendNewFormelRequest$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(formel);\n              timeoutPromise(2000, fetch('https://api.race24.cloud/formel/create', {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  formel: formel\n                })\n              })).then(function (response) {\n                return response.json();\n              }).then(function (data) {\n                if (data[1] == 200) {\n                  _this2.getTabularData();\n                } else {\n                  console.log(\"failed\");\n                }\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getTabularData\",\n    value: function getTabularData() {\n      var _this3 = this;\n\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function getTabularData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context2.sent;\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(getWheelInformations(accesstoken, raceID).then(function (formellistTab) {\n                console.log(formellistTab);\n\n                _this3.setState({\n                  list_formel: formellistTab\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var raceid;\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.getTabularData());\n\n            case 2:\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceItem'));\n\n            case 4:\n              raceid = _context3.sent;\n              this.setState({\n                raceID: raceid\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"renderTableHeader\",\n    value: function renderTableHeader() {\n      var header = ['Kategorie', 'Status', 'Temperatur', 'Reifen Luftdruck', 'Reifen ID'];\n      return header.map(function (key, index) {\n        return React.createElement(\"th\", {\n          bgcolor: \"#696969\",\n          style: {\n            textAlign: \"left\",\n            padding: '8px',\n            color: 'white',\n            fontFamily: 'arial'\n          },\n          key: index\n        }, key.toUpperCase());\n      });\n    }\n  }, {\n    key: \"renderTableData\",\n    value: function renderTableData() {\n      console.log(this.state.list_formel);\n      return this.state.list_formel.map(function (list_formel, index) {\n        return React.createElement(\"tr\", {\n          bgcolor: \"#696969\",\n          style: {\n            textAlign: \"left\",\n            padding: '8px',\n            color: 'white',\n            fontFamily: 'arial'\n          },\n          key: list_formel.setNr\n        }, React.createElement(\"td\", {\n          style: {\n            border: \"solid\",\n            borderColor: 'dimgrey',\n            height: 20,\n            width: 100,\n            padding: '8px'\n          }\n        }, React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: \"test\",\n          value: list_formel.cat\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: list_formel.subcat,\n          value: list_formel.subcat\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'Variante',\n          value: list_formel.variant\n        })), React.createElement(\"td\", {\n          style: {\n            border: \"solid\",\n            borderColor: 'dimgrey',\n            height: 20,\n            width: 100,\n            padding: '8px'\n          }\n        }, React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: list_formel.status,\n          value: list_formel.status\n        })), React.createElement(\"td\", {\n          style: {\n            border: \"solid\",\n            borderColor: 'dimgrey',\n            height: 20,\n            width: 150,\n            padding: '8px'\n          }\n        }, React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'Temperatur',\n          value: list_formel.temp\n        }), \" \"), React.createElement(\"td\", {\n          style: {\n            border: \"solid\",\n            borderColor: 'dimgrey',\n            height: 20,\n            width: 100,\n            padding: '8px'\n          }\n        }, React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'Luftdruck BR',\n          value: list_formel.br_pressure\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'Luftdruck BL',\n          value: list_formel.bl_pressure\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'Luftdruck FL',\n          value: list_formel.fr_pressure\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'Luftdruck FL',\n          value: list_formel.fl_pressure\n        })), React.createElement(\"td\", {\n          style: {\n            border: \"solid\",\n            borderColor: 'dimgrey',\n            height: 20,\n            width: 150,\n            padding: '8px'\n          }\n        }, React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'ID BL',\n          value: list_formel.bl_wheel_id\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'ID BR',\n          value: list_formel.br_wheel_id\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'ID FR',\n          value: list_formel.fr_wheel_id\n        }), React.createElement(\"input\", {\n          id: list_formel.setNr,\n          placeholder: 'ID FL',\n          value: list_formel.fl_wheel_id\n        })));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var optionTemplate = this.state.dataViews.map(function (v) {\n        return React.createElement(\"option\", {\n          value: v.id,\n          key: v.id\n        }, v.name);\n      });\n      return React.createElement(View, {\n        style: styles.viewStyles\n      }, React.createElement(\"h1\", null, this.state.selectedView), React.createElement(\"label\", {\n        style: {\n          fontSize: 16,\n          fontFamily: 'arial',\n          textAlign: 'center'\n        }\n      }, \" Ansicht: \", React.createElement(\"select\", {\n        value: this.state.selectedView,\n        onChange: this.changeView\n      }, optionTemplate)), React.createElement(Text, {\n        style: {\n          height: 20\n        }\n      }, \"Dropdownliste, Set ausw\\xE4hlen von Rennen\"), React.createElement(Text, {\n        style: {\n          height: 20\n        }\n      }, \"Tabelle, alle Attribute des Sets in editierbarer Tabelle\"), React.createElement(ScrollView, null, React.createElement(\"div\", null, React.createElement(\"h1\", {\n        id: \"title\"\n      }, \"Angelegte Reifen\"), React.createElement(\"table\", {\n        id: \"list_formel\"\n      }, React.createElement(\"tbody\", null, this.renderTableHeader(), this.renderTableData())))), React.createElement(Text, {\n        style: {\n          height: 20\n        }\n      }), React.createElement(Button, {\n        title: \"zur\\xFCck\",\n        onPress: this.changeRace\n      }));\n    }\n  }]);\n\n  return WheelScreen;\n}(React.Component);\n\nexport { WheelScreen as default };","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/Reifenmanagement.js"],"names":["React","styles","getRaceList","getWeatherTab","timeoutPromise","getWheelsList","getRaceDetails_by_ID","getFormelList","get_Dict_WheelOrder","getDropdown","getWheelSetInformation","getWheelInformations","AsyncStorage","Icon","ScrollViewBase","WheelScreen","props","changeRace","event","preventDefault","navigation","goBack","changeView","setState","selectedView","target","value","state","list_formel","formel","raceID","dataViews","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","data","getTabularData","catch","error","getItem","accesstoken","formellistTab","raceid","header","map","key","index","textAlign","padding","color","fontFamily","toUpperCase","setNr","border","borderColor","height","width","cat","subcat","variant","status","temp","br_pressure","bl_pressure","fr_pressure","fl_pressure","bl_wheel_id","br_wheel_id","fr_wheel_id","fl_wheel_id","optionTemplate","v","id","name","viewStyles","fontSize","renderTableHeader","renderTableData","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    View,\n    Text,\n    StyleSheet,\n    Image,\n    TextInput,\n    TouchableHighlight,\n    SectionList,\n    TouchableOpacity,\n    ScrollView\n} from 'react-native';\nimport {styles} from \"./styles\"\nimport {getRaceList, getWeatherTab, timeoutPromise, getWheelsList, getRaceDetails_by_ID, getFormelList} from \"./tools\"\nimport {get_Dict_WheelOrder, getDropdown,getWheelSetInformation,getWheelInformations} from \"./tools_get_wheels\";\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {Button} from \"react-native-web\";\nimport ScrollViewBase from \"react-native-web/dist/exports/ScrollView/ScrollViewBase\";\n\nexport default class WheelScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list_formel:[],\n            formel:\"\",\n            raceID:0,\n            dataViews: [{'name': \"Alle Werte\", 'id': 1}, {'name': \"Heizdaten\", 'id': 2}, {'name': \"Laufleistungen\", 'id': 3}, {'name': \"Kalt- und Warmdruckwerte\", 'id': 4} ],\n            selectedView: 1,\n        }\n    }\n\n    changeRace = event => {\n        event.preventDefault();\n        this.props.navigation.goBack();\n    }\n\n\n\n    async sendNewFormelRequest(formel) {\n        console.log(formel)\n       timeoutPromise(2000, fetch(\n            'https://api.race24.cloud/formel/create', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    formel:formel,\n                })\n            })\n            ).then(response => response.json()).then(data => {\n                if (data[1]==200) {\n                    this.getTabularData()\n                }\n                else {\n                    console.log(\"failed\")\n                }\n            }).catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    async getTabularData(){\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        await getWheelInformations(accesstoken,raceID).then(formellistTab => {\n            console.log(formellistTab);\n            this.setState({list_formel: formellistTab});\n        }).catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    async componentDidMount() {\n        await this.getTabularData()\n        const raceid = await AsyncStorage.getItem('raceItem');\n        this.setState({raceID: raceid});\n    }\n\n\n\n   renderTableHeader() {\n    let header = ['Kategorie', 'Status','Temperatur',\n        'Reifen Luftdruck','Reifen ID'];\n      //let header = Object.keys(this.state.list_formel[0]);\n      return header.map((key, index) => {\n         return <th bgcolor='#696969' style={{textAlign: \"left\", padding: '8px', color: 'white', fontFamily: 'arial'}} key={index}>{key.toUpperCase()}</th>\n      })\n   }\n\n\n    renderTableData() {\n        console.log(this.state.list_formel)\n        return this.state.list_formel.map((list_formel, index) => {\n            //const { n, formel } =list_formel //destructuring\n            return (\n            <tr bgcolor='#696969' style={{textAlign: \"left\", padding: '8px', color: 'white', fontFamily: 'arial'}} key={list_formel.setNr}>\n               <td style={{border: \"solid\", borderColor: 'dimgrey', height: 20, width: 100, padding: '8px'}} >\n                   <input id ={list_formel.setNr}  placeholder='test' value={list_formel.cat}  />\n                    <input id ={list_formel.setNr}  placeholder={list_formel.subcat} value={list_formel.subcat} />\n                    <input id={list_formel.setNr}  placeholder={'Variante'} value={list_formel.variant} />\n               </td>\n                 <td style={{border: \"solid\", borderColor: 'dimgrey', height: 20, width: 100, padding: '8px'}} >\n                     <input id ={list_formel.setNr}  placeholder={list_formel.status} value={list_formel.status} /></td>\n               <td style={{border: \"solid\", borderColor: 'dimgrey', height: 20, width: 150, padding: '8px'}} >\n                   <input id ={list_formel.setNr}  placeholder={'Temperatur'} value={list_formel.temp} /> </td>\n                 <td style={{border: \"solid\", borderColor: 'dimgrey', height: 20, width: 100, padding: '8px'}} >\n                     <input id ={list_formel.setNr}  placeholder={'Luftdruck BR'} value={list_formel.br_pressure}/>\n                     <input id ={list_formel.setNr}  placeholder={'Luftdruck BL'} value={list_formel.bl_pressure}/>\n                     <input id ={list_formel.setNr}  placeholder={'Luftdruck FL'} value={list_formel.fr_pressure}/>\n                     <input id ={list_formel.setNr}  placeholder={'Luftdruck FL'} value={list_formel.fl_pressure}/>\n                 </td>\n               <td style={{border: \"solid\", borderColor: 'dimgrey', height: 20, width: 150, padding: '8px'}} >\n                    <input id ={list_formel.setNr}  placeholder={'ID BL'} value={list_formel.bl_wheel_id}/>\n                    <input id ={list_formel.setNr}  placeholder={'ID BR'} value={list_formel.br_wheel_id}/>\n                    <input id ={list_formel.setNr}  placeholder={'ID FR'} value={list_formel.fr_wheel_id}/>\n                    <input id ={list_formel.setNr}  placeholder={'ID FL'} value={list_formel.fl_wheel_id}/></td>\n                </tr>\n         )\n      })\n   }\n\n   changeView = event => {\n        this.setState({selectedView: event.target.value});\n   }\n\n    render() {\n         let optionTemplate = this.state.dataViews.map(v => (\n            <option value={v.id} key={v.id}>{v.name}</option>\n        ));\n        return (\n            <View style={styles.viewStyles}>\n                <h1>{this.state.selectedView}</h1>\n                <label style={{fontSize: 16, fontFamily: 'arial', textAlign: 'center'}}> Ansicht: <select value={this.state.selectedView} onChange={this.changeView}>\n                        {optionTemplate}\n                    </select>\n             </label>\n                <Text style={{height: 20}}>Dropdownliste, Set auswählen von Rennen</Text>\n                <Text style={{height: 20}}>Tabelle, alle Attribute des Sets in editierbarer Tabelle</Text>\n\n                <ScrollView>\n                <div>\n                <h1 id='title'>Angelegte Reifen</h1>\n                <table  id='list_formel'>\n                   <tbody>\n                   {this.renderTableHeader()}\n                      {this.renderTableData()}\n                   </tbody>\n                </table>\n                </div>\n                </ScrollView>\n                <Text style={{height: 20}}></Text>\n                <Button\n                        title=\"zurück\"\n                        onPress={this.changeRace}\n                />\n            </View>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}